version: '3.8'

networks:
  frontend:
  backend:

services:
  collab-service:
    container_name: collab-service
    build:
      context: ./collab-service
    environment:
      QUESTION_SVC_URI: http://question-service:5000
      DATABASE_URL: mongodb://mongo-db:27017/collab-docs
    ports:
      - 8080:8080
    networks:
      - backend
    depends_on:
      - mongo-db
      - question-service

  frontend:
    container_name: frontend
    build:
      context: ./frontend
    command: npm run dev
    ports:
      - 3000:3000
    networks:
      - frontend
    environment:
      NEXT_PUBLIC_COLLAB_SVC_URI: ws://localhost:8080
      NEXT_PUBLIC_VIDEO_SVC_URI: http://localhost:3002
    depends_on:
      - user-service
      - question-service
      - matching-service
      - collab-service
      - video-service
  
  api-gateway:
    container_name: api-gateway
    build:
      context: ./gateway
    ports:
      - 3001:3001
    networks:
      - frontend
      - backend
    depends_on:
      - user-service
      - question-service
      - matching-service
    environment:
      USER_BASE_URL: http://user-service:8000
      QUESTION_BASE_URL: http://question-service:5000
      MATCHING_BASE_URL: http://matching-service:8001
      SECRET_KEY: ${SECRET_KEY}

  user-service:
    container_name: user-service
    build:
      context: ./user-service
    command: 'python manage.py runserver 0.0.0.0:8000'
    ports:
      - 8000:8000
    networks:
      - backend
    depends_on: 
      - postgres-db
    env_file:
      - .env
  
  question-service:
    container_name: question-service
    build:
      context: ./question-service
    environment:
      DATABASE_URL: mongodb://mongo-db:27017/questions
      SECRET_KEY: ${SECRET_KEY}
    ports: 
      - 5000:5000
    networks:
      - backend
    depends_on:
      - mongo-db
    
  matching-service:
    container_name: matching-service
    build:
      context: ./matching-service
    networks:
      - backend
    environment:
      COLLAB_SVC_URI: ws://collab-service:8080
      PORT: 8001
    ports: 
      - 8001:8001
    depends_on:
      - collab-service
  
  video-service:
    container_name: video-service
    build:
      context: ./video-service
    networks:
      - backend
    environment:
      PORT: 3002
    ports:
      - 3002:3002

  postgres-db:
    container_name: ${DATABASE_HOST}
    image: postgres:15.4
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres-db:/var/lib/postgresql/data
    ports:
      - ${DATABASE_PORT}:${DATABASE_PORT}
    networks:
      - backend

  mongo-db:
    container_name: mongo-db
    image: mongo:latest
    restart: always
    volumes:
      - mongo-db:/data/db
    ports:
      - 27017:27017
    networks:
      - backend

  history-service:
    container_name: history-service
    build:
      context: ./history-service
      dockerfile: Dockerfile
    command: 'npm start'
    ports:
      - "5433:5433"
    depends_on:
      - postgres-db9000


  postgres-db9000:
    image: postgres:latest
    container_name: submission-db
    environment:
      POSTGRES_DB: submission-db
      POSTGRES_USER: postgres-db
      POSTGRES_PASSWORD: postgres-db
    volumes:
      - ./history-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "9000:5432"

volumes:
  postgres-db:
  mongo-db:
